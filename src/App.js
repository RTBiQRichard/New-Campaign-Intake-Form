import React, { useMemo, useState } from "react";
function classNames(...xs) { return xs.filter(Boolean).join(" "); }
function luhnCheck(num) { const s=(num||"").replace(/\D/g,""); if(!s) return false; let sum=0,d=false; for(let i=s.length-1;i>=0;i--){ let n=+s[i]; if(d){ n*=2; if(n>9)n-=9 } sum+=n; d=!d } return sum%10===0 }
function detectBrand(num){ const s=(num||"").replace(/\D/g,""); if(/^4\d{0,15}$/.test(s)) return "Visa"; if(/^5[1-5]\d{0,14}$/.test(s)||/^2(2[2-9]|[3-6]\d|7[01]|720)\d{0,12}$/.test(s)) return "Mastercard"; if(/^3[47]\d{0,13}$/.test(s)) return "AmEx"; if(/^6(?:011|5\d{2})\d{0,12}$/.test(s)) return "Discover"; return "" }
function formatCardNumber(v){ const s=(v||"").replace(/\D/g,""); const b=detectBrand(s); if(b==="AmEx"){ return s.replace(/(\d{1,4})(\d{1,6})?(\d{1,5})?/, (m,a,c,d)=>[a,c,d].filter(Boolean).join(" ")) } return s.replace(/(\d{1,4})(\d{1,4})?(\d{1,4})?(\d{1,4})?/, (m,a,c,d,e)=>[a,c,d,e].filter(Boolean).join(" ")) }
function currencyToNumber(v){ const s=(v||"").toString().replace(/[^\d.]/g,""); const n=Number(s); return Number.isFinite(n)?n:0 }
const PLACEMENTS=[{key:"audio",label:"Audio & Podcasts"},{key:"ctv",label:"CTV / OTT"},{key:"display",label:"Display"},{key:"dooh",label:"DOOH"},{key:"social",label:"Social (v2)"}]
const DISPLAY_SIZES=["300x250","320x50","120x600","160x600"]
function TextField({label,value,onChange,placeholder,error,type="text",inputMode}){ return (<div><label className="block text-sm font-medium">{label}</label><input type={type} inputMode={inputMode} className={classNames("mt-1 w-full rounded-xl border p-2", error&&"border-red-500")} value={value} onChange={(e)=>onChange(e.target.value)} placeholder={placeholder}/>{error&&<p className="mt-1 text-xs text-red-600">{error}</p>}</div>) }
function TextArea({label,value,onChange,placeholder,error,rows=3}){ return (<div><label className="block text-sm font-medium">{label}</label><textarea className={classNames("mt-1 w-full rounded-xl border p-2", error&&"border-red-500")} rows={rows} value={value} onChange={(e)=>onChange(e.target.value)} placeholder={placeholder}/>{error&&<p className="mt-1 text-xs text-red-600">{error}</p>}</div>) }
function GeoTargeting({ data, setData, errors, accent = "#2563EB" }){ const opts=["ZIP Code/s","DMA","State"]; return (<section className="rounded-2xl border p-4"><h2 className="text-sm font-semibold">Geographic targeting</h2><div className="mt-3 grid grid-cols-1 gap-3 sm:grid-cols-3">{opts.map(t=>(<label key={t} className="flex cursor-pointer items-center gap-2 rounded-xl border p-2" style={data.geoType===t?{borderColor:accent, boxShadow:`0 0 0 1px ${accent}`}:{}}><input type="radio" name="geoType" checked={data.geoType===t} onChange={()=>setData(d=>({...d, geoType:t}))}/><span className="text-sm">{t}</span></label>))}</div><div className="mt-3"><TextArea label={data.geoType==="ZIP Code/s"?"ZIP code list (comma or newline separated)":data.geoType==="DMA"?"DMA name(s) or code(s)":"State name(s)"} value={data.geoValue} onChange={(v)=>setData(d=>({...d, geoValue:v}))} placeholder={data.geoType==="ZIP Code/s"?"10001, 11201, 60601":data.geoType==="DMA"?"New York, Los Angeles":"NY, CA"} error={errors.geoValue}/></div></section>) }
function Placements({ data, setData, errors, accent = "#2563EB" }){ function togglePlacement(key){ setData(d=>{ const has=d.placements.includes(key); const placements=has?d.placements.filter(x=>x!==key):[...d.placements,key]; const displaySizes=placements.includes("display")?d.displaySizes:[]; return {...d, placements, displaySizes} }) } function toggleDisplaySize(size){ setData(d=>{ const has=d.displaySizes.includes(size); const displaySizes=has?d.displaySizes.filter(x=>x!==size):[...d.displaySizes,size]; return {...d, displaySizes} }) } return (<section className="rounded-2xl border p-4"><h2 className="text-sm font-semibold">Placement/s</h2><div className="mt-3 grid grid-cols-1 gap-2 sm:grid-cols-2">{PLACEMENTS.map(p=>(<label key={p.key} className="flex items-center gap-3 rounded-xl border p-3"><input type="checkbox" checked={data.placements.includes(p.key)} onChange={()=>togglePlacement(p.key)}/><span className="text-sm">{p.label}</span></label>))}</div>{data.placements.includes("display")&&(<div className="mt-4"><h3 className="text-xs font-medium text-gray-600">Display sizes</h3><div className="mt-2 flex flex-wrap gap-2">{DISPLAY_SIZES.map(size=>(<button key={size} type="button" className="rounded-full border px-3 py-1 text-xs" style={data.displaySizes.includes(size)?{borderColor:accent, backgroundColor:`${accent}1A`}:{}} onClick={()=>toggleDisplaySize(size)}>{size}</button>))}</div>{errors.displaySizes&&<p className="mt-1 text-xs text-red-600">{errors.displaySizes}</p>}</div>)}</section>) }
function Payment({ data, setData, errors }){ const brand=useMemo(()=>detectBrand(data.ccNumber),[data.ccNumber]); return (<section className="rounded-2xl border p-4"><h2 className="text-sm font-semibold">Credit Card (prototype only)</h2><p className="mt-1 text-xs text-gray-500">In production, use Stripe/Adyen/Braintree Elements to tokenize—never store raw card data.</p><div className="mt-3 grid grid-cols-1 gap-4 sm:grid-cols-2"><TextField label="Name on card" value={data.ccName} onChange={(v)=>setData(d=>({...d, ccName:v}))} placeholder="Jane Q. Buyer" error={errors.ccName}/><TextField label="ZIP / Postal" value={data.ccZip} onChange={(v)=>setData(d=>({...d, ccZip:v}))} placeholder="10001" error={errors.ccZip}/><div className="sm:col-span-2"><label className="block text-sm">Card number {brand&&(<span className="ml-2 rounded-full bg-gray-100 px-2 py-0.5 text-xs">{brand}</span>)}</label><input inputMode="numeric" className={classNames("mt-1 w-full rounded-xl border p-2 tracking-widest", errors.ccNumber&&"border-red-500")} value={formatCardNumber(data.ccNumber)} onChange={(e)=>setData(d=>({...d, ccNumber:e.target.value}))} placeholder="1234 1234 1234 1234" maxLength={brand==="AmEx"?17:19}/>{errors.ccNumber&&<p className="mt-1 text-xs text-red-600">{errors.ccNumber}</p>}</div><TextField label="Expiry (MM/YY)" value={data.ccExp} onChange={(v)=>{ let s=v.replace(/\D/g,""); if(s.length>4)s=s.slice(0,4); if(s.length>2)s=s.slice(0,2)+"/"+s.slice(2); setData(d=>({...d, ccExp:s})) }} placeholder="MM/YY" error={errors.ccExp} inputMode="numeric"/><TextField label="CVC" value={data.ccCvc} onChange={(v)=>setData(d=>({...d, ccCvc:v.replace(/\D/g,"").slice(0,4)}))} placeholder="123" error={errors.ccCvc} inputMode="numeric"/></div></section>) }
function validate(data){ const e={}; if(!data.advertiser?.trim()) e.advertiser="Required"; if(!data.campaign?.trim()) e.campaign="Required"; if(!data.startDate) e.startDate="Required"; if(!data.endDate) e.endDate="Required"; if(data.startDate&&data.endDate&&new Date(data.endDate)<new Date(data.startDate)) e.endDate="End date must be after start date"; const budgetNum=currencyToNumber(data.budget); if(!budgetNum||budgetNum<=0) e.budget="Enter a positive amount"; if(!data.geoValue?.trim()) e.geoValue="Enter targeting details"; try{ if(data.clickUrl&&!new URL(data.clickUrl)){} }catch{ e.clickUrl="Enter a valid URL (incl. https://)" } if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(data.reportEmail||"")) e.reportEmail="Enter a valid email"; if(!data.ccName?.trim()) e.ccName="Required"; const raw=(data.ccNumber||"").replace(/\D/g,""); if(raw.length<12||!luhnCheck(raw)) e.ccNumber="Card number looks invalid"; if(!/^\d{2}\/(\d{2})$/.test(data.ccExp||"")) e.ccExp="Use MM/YY"; if(!/^\d{3,4}$/.test(data.ccCvc||"")) e.ccCvc="3–4 digits"; if(!/^\d{3,10}$/.test(data.ccZip||"")) e.ccZip="ZIP/postal required"; if(data.placements.includes("display")&&data.displaySizes.length===0) e.displaySizes="Pick at least one display size"; return e }
function VariantCards({ data, setData, errors, onSubmit }){ return (<div className="mx-auto max-w-3xl rounded-2xl bg-white p-6 shadow"><h1 className="text-2xl font-bold tracking-tight">Campaign Intake</h1><p className="text-sm text-gray-500">Classic card layout</p><form onSubmit={onSubmit} className="mt-6 space-y-6"><section className="grid grid-cols-1 gap-4 sm:grid-cols-2"><TextField label="Advertiser" value={data.advertiser} onChange={(v)=>setData(d=>({...d, advertiser:v}))} placeholder="ACME Corp" error={errors.advertiser}/><TextField label="Campaign" value={data.campaign} onChange={(v)=>setData(d=>({...d, campaign:v}))} placeholder="Fall Launch" error={errors.campaign}/></section><section className="grid grid-cols-1 gap-4 sm:grid-cols-3"><TextField label="Start date" type="date" value={data.startDate} onChange={(v)=>setData(d=>({...d, startDate:v}))} error={errors.startDate}/><TextField label="End date" type="date" value={data.endDate} onChange={(v)=>setData(d=>({...d, endDate:v}))} error={errors.endDate}/><div><label className="block text-sm font-medium">Spend budget</label><div className="mt-1 flex rounded-xl border focus-within:ring-2"><span className="inline-flex items-center px-2 text-gray-500">$</span><input inputMode="decimal" className={classNames("w-full rounded-r-xl p-2 outline-none", errors.budget&&"ring-2 ring-red-500")} value={data.budget} onChange={(e)=>setData(d=>({...d, budget:e.target.value}))} placeholder="10,000.00"/></div>{errors.budget&&<p className="mt-1 text-xs text-red-600">{errors.budget}</p>}</div></section><GeoTargeting data={data} setData={setData} errors={errors}/><Placements data={data} setData={setData} errors={errors}/><section className="grid grid-cols-1 gap-4 sm:grid-cols-2"><TextField label="Click URL" value={data.clickUrl} onChange={(v)=>setData(d=>({...d, clickUrl:v}))} placeholder="https://example.com/landing" error={errors.clickUrl}/><TextField label="Email for reports" value={data.reportEmail} onChange={(v)=>setData(d=>({...d, reportEmail:v}))} placeholder="you@company.com" error={errors.reportEmail}/></section><Payment data={data} setData={setData} errors={errors}/><div className="flex items-center justify-between"><button type="button" onClick={()=>setData({advertiser:"",campaign:"",startDate:"",endDate:"",budget:"",geoType:"ZIP Code/s",geoValue:"",placements:[],displaySizes:[],clickUrl:"",reportEmail:"",ccName:"",ccNumber:"",ccExp:"",ccCvc:"",ccZip:""})} className="rounded-xl border px-4 py-2 text-sm hover:bg-gray-50">Clear</button><button type="submit" className="rounded-xl bg-blue-600 px-5 py-2 text-sm font-medium text-white shadow hover:bg-blue-700">Submit</button></div></form></div>) }
function VariantSplit({ data, setData, errors, onSubmit }){ return (<div className="mx-auto max-w-6xl rounded-2xl bg-white shadow"><div className="grid grid-cols-1 md:grid-cols-3"><aside className="hidden border-r md:block md:col-span-1"><div className="sticky top-0 h-full p-6"><h2 className="text-lg font-semibold">Campaign Intake</h2><ol className="mt-4 space-y-3 text-sm text-gray-600"><li>1. Basics</li><li>2. Dates & Budget</li><li>3. Geo Targeting</li><li>4. Placements</li><li>5. Links & Email</li><li>6. Payment</li></ol><div className="mt-6 rounded-xl bg-gray-50 p-4 text-xs text-gray-600">Tip: Sidebar stays visible while you fill the form.</div></div></aside><main className="md:col-span-2 p-6"><form onSubmit={onSubmit} className="space-y-6"><section className="grid grid-cols-1 gap-4 sm:grid-cols-2"><TextField label="Advertiser" value={data.advertiser} onChange={(v)=>setData(d=>({...d, advertiser:v}))} placeholder="ACME Corp" error={errors.advertiser}/><TextField label="Campaign" value={data.campaign} onChange={(v)=>setData(d=>({...d, campaign:v}))} placeholder="Fall Launch" error={errors.campaign}/></section><section className="grid grid-cols-1 gap-4 sm:grid-cols-3"><TextField label="Start date" type="date" value={data.startDate} onChange={(v)=>setData(d=>({...d, startDate:v}))} error={errors.startDate}/><TextField label="End date" type="date" value={data.endDate} onChange={(v)=>setData(d=>({...d, endDate:v}))} error={errors.endDate}/><div><label className="block text-sm font-medium">Spend budget</label><div className="mt-1 flex rounded-xl border focus-within:ring-2"><span className="inline-flex items-center px-2 text-gray-500">$</span><input inputMode="decimal" className={classNames("w-full rounded-r-xl p-2 outline-none", errors.budget&&"ring-2 ring-red-500")} value={data.budget} onChange={(e)=>setData(d=>({...d, budget:e.target.value}))} placeholder="10,000.00"/></div>{errors.budget&&<p className="mt-1 text-xs text-red-600">{errors.budget}</p>}</div></section><GeoTargeting data={data} setData={setData} errors={errors}/><Placements data={data} setData={setData} errors={errors}/><section className="grid grid-cols-1 gap-4 sm:grid-cols-2"><TextField label="Click URL" value={data.clickUrl} onChange={(v)=>setData(d=>({...d, clickUrl:v}))} placeholder="https://example.com/landing" error={errors.clickUrl}/><TextField label="Email for reports" value={data.reportEmail} onChange={(v)=>setData(d=>({...d, reportEmail:v}))} placeholder="you@company.com" error={errors.reportEmail}/></section><Payment data={data} setData={setData} errors={errors}/><div className="flex items-center justify-between"><button type="button" onClick={()=>setData({advertiser:"",campaign:"",startDate:"",endDate:"",budget:"",geoType:"ZIP Code/s",geoValue:"",placements:[],displaySizes:[],clickUrl:"",reportEmail:"",ccName:"",ccNumber:"",ccExp:"",ccCvc:"",ccZip:""})} className="rounded-xl border px-4 py-2 text-sm hover:bg-gray-50">Clear</button><button type="submit" className="rounded-xl bg-indigo-600 px-5 py-2 text-sm font-medium text-white shadow hover:bg-indigo-700">Submit</button></div></form></main></div></div>) }
function Summary({ data }){ return (<div className="rounded-2xl border p-4 text-sm"><h3 className="font-semibold">Summary</h3><div className="mt-2 space-y-1 text-gray-600"><div><span className="font-medium">Advertiser:</span> {data.advertiser||"—"}</div><div><span className="font-medium">Campaign:</span> {data.campaign||"—"}</div><div><span className="font-medium">Dates:</span> {data.startDate||"—"} → {data.endDate||"—"}</div><div><span className="font-medium">Budget:</span> {data.budget||"—"}</div><div><span className="font-medium">Geo:</span> {data.geoType} — {data.geoValue||"—"}</div><div><span className="font-medium">Placements:</span> {data.placements.length?data.placements.join(", "):"—"}{data.placements.includes("display")&&data.displaySizes.length?` [${data.displaySizes.join(", ")}]`:""}</div><div><span className="font-medium">Click URL:</span> {data.clickUrl||"—"}</div><div><span className="font-medium">Report email:</span> {data.reportEmail||"—"}</div></div></div>) }
function VariantCompact({ data, setData, errors, onSubmit }){ return (<div className="mx-auto grid max-w-6xl grid-cols-1 gap-6 md:grid-cols-3"><div className="md:col-span-2 rounded-2xl bg-white p-6 shadow"><h1 className="text-2xl font-bold tracking-tight">Campaign Intake</h1><p className="text-sm text-gray-500">Compact single-column with sticky summary</p><form onSubmit={onSubmit} className="mt-6 space-y-6"><section className="grid grid-cols-1 gap-4 sm:grid-cols-2"><TextField label="Advertiser" value={data.advertiser} onChange={(v)=>setData(d=>({...d, advertiser:v}))} placeholder="ACME Corp" error={errors.advertiser}/><TextField label="Campaign" value={data.campaign} onChange={(v)=>setData(d=>({...d, campaign:v}))} placeholder="Fall Launch" error={errors.campaign}/></section><section className="grid grid-cols-1 gap-4 sm:grid-cols-3"><TextField label="Start date" type="date" value={data.startDate} onChange={(v)=>setData(d=>({...d, startDate:v}))} error={errors.startDate}/><TextField label="End date" type="date" value={data.endDate} onChange={(v)=>setData(d=>({...d, endDate:v}))} error={errors.endDate}/><div><label className="block text-sm font-medium">Spend budget</label><div className="mt-1 flex rounded-xl border focus-within:ring-2"><span className="inline-flex items-center px-2 text-gray-500">$</span><input inputMode="decimal" className={classNames("w-full rounded-r-xl p-2 outline-none", errors.budget&&"ring-2 ring-red-500")} value={data.budget} onChange={(e)=>setData(d=>({...d, budget:e.target.value}))} placeholder="10,000.00"/></div>{errors.budget&&<p className="mt-1 text-xs text-red-600">{errors.budget}</p>}</div></section><GeoTargeting data={data} setData={setData} errors={errors}/><Placements data={data} setData={setData} errors={errors}/><section className="grid grid-cols-1 gap-4 sm:grid-cols-2"><TextField label="Click URL" value={data.clickUrl} onChange={(v)=>setData(d=>({...d, clickUrl:v}))} placeholder="https://example.com/landing" error={errors.clickUrl}/><TextField label="Email for reports" value={data.reportEmail} onChange={(v)=>setData(d=>({...d, reportEmail:v}))} placeholder="you@company.com" error={errors.reportEmail}/></section><Payment data={data} setData={setData} errors={errors}/><div className="flex items-center justify-between"><button type="button" onClick={()=>setData({advertiser:"",campaign:"",startDate:"",endDate:"",budget:"",geoType:"ZIP Code/s",geoValue:"",placements:[],displaySizes:[],clickUrl:"",reportEmail:"",ccName:"",ccNumber:"",ccExp:"",ccCvc:"",ccZip:""})} className="rounded-xl border px-4 py-2 text-sm hover:bg-gray-50">Clear</button><button type="submit" className="rounded-xl bg-emerald-600 px-5 py-2 text-sm font-medium text-white shadow hover:bg-emerald-700">Submit</button></div></form></div><div className="md:sticky md:top-6 md:h-fit"><Summary data={data}/></div></div>) }

export default function App(){ const [variant, setVariant] = useState("cards"); const [data, setData] = useState({advertiser:"",campaign:"",startDate:"",endDate:"",budget:"",geoType:"ZIP Code/s",geoValue:"",placements:[],displaySizes:[],clickUrl:"",reportEmail:"",ccName:"",ccNumber:"",ccExp:"",ccCvc:"",ccZip:""}); const [errors, setErrors]=useState({}); const [submitted, setSubmitted] = useState(null);
  function onSubmit(ev){ ev.preventDefault(); const e=validate(data); setErrors(e); if(Object.keys(e).length) return; const payload={ advertiser:data.advertiser, campaign:data.campaign, startDate:data.startDate, endDate:data.endDate, budget:currencyToNumber(data.budget), targeting:{type:data.geoType, value:data.geoValue}, placements:data.placements, displaySizes:data.displaySizes, clickUrl:data.clickUrl, reportEmail:data.reportEmail, payment:{ nameOnCard:data.ccName, cardBrand:detectBrand(data.ccNumber)||"Unknown", cardLast4:(data.ccNumber.replace(/\D/g,"").slice(-4)) } }; setSubmitted(payload) }
  return (<div className="min-h-screen bg-gray-50 p-4 sm:p-8"><div className="mx-auto mb-4 flex max-w-6xl flex-wrap items-center justify-between gap-3"><div><h1 className="text-xl font-bold">Visual Options</h1><p className="text-xs text-gray-500">Switch between three layouts. All fields are identical.</p></div><div className="flex gap-2"><button onClick={()=>setVariant("cards")} className={classNames("rounded-full px-3 py-1 text-sm", variant==='cards' ? "bg-black text-white" : "bg-white border")}>Cards</button><button onClick={()=>setVariant("split")} className={classNames("rounded-full px-3 py-1 text-sm", variant==='split' ? "bg-black text-white" : "bg-white border")}>Split Sidebar</button><button onClick={()=>setVariant("compact")} className={classNames("rounded-full px-3 py-1 text-sm", variant==='compact' ? "bg-black text-white" : "bg-white border")}>Compact + Summary</button></div></div>{variant==="cards"&&<VariantCards data={data} setData={setData} errors={errors} onSubmit={onSubmit}/>} {variant==="split"&&<VariantSplit data={data} setData={setData} errors={errors} onSubmit={onSubmit}/>} {variant==="compact"&&<VariantCompact data={data} setData={setData} errors={errors} onSubmit={onSubmit}/>} {submitted&&(<div className="mx-auto mt-6 max-w-6xl rounded-2xl border bg-gray-50 p-4"><h3 className="text-sm font-semibold">Submitted payload</h3><pre className="mt-2 overflow-auto rounded-xl bg-black p-3 text-xs text-green-200">{JSON.stringify(submitted, null, 2)}</pre></div>)} </div>) }
